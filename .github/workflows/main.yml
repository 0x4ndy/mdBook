name: CI
on:
  pull_request:
  merge_group:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, beta, nightly, macos, windows, msrv]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
          - build: msrv
            os: ubuntu-20.04
            # sync MSRV with docs: guide/src/guide/installation.md and Cargo.toml
            rust: 1.66.0
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: bash ci/install-rust.sh ${{ matrix.rust }}
    - name: Build and run tests
      run: cargo test --locked
    - name: Test no default
      run: cargo test --no-default-features

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt --check

  # These success/failure jobs are here to consolidate the total
  # success/failure state of all other jobs. These jobs are then included in
  # the GitHub branch protection rule which prevents merges unless all other
  # jobs are passing. This makes it easier to manage the list of jobs via this
  # yml file and to prevent accidentally adding new jobs without also updating
  # the branch protections.
  #
  # Unfortunately this requires two jobs because the branch protection
  # considers skipped jobs as successful. The status check functions like
  # success() can only be in an `if` condition.
  #
  # Beware that success() is false if any dependent job is skipped. See
  # https://github.com/orgs/community/discussions/45058. This means there
  # cannot be optional jobs. One workaround is to check for all other
  # statuses:
  #     (contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') || contains(needs.*.result, 'failure'))
  # but that is a mess.
  success:
    name: Success gate
    runs-on: ubuntu-latest
    needs:
      - test
      - rustfmt
    if: "success()"
    steps:
      - name: mark the job as a success
        run: echo success
  failure:
    name: Failure gate
    runs-on: ubuntu-latest
    needs:
      - test
      - rustfmt
    if: "!success()"
    steps:
      - name: mark the job as a failure
        run: |
          echo One or more jobs failed
          exit 1
